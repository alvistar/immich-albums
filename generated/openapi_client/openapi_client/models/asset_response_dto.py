# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.105.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.asset_type_enum import AssetTypeEnum
from openapi_client.models.exif_response_dto import ExifResponseDto
from openapi_client.models.person_with_faces_response_dto import PersonWithFacesResponseDto
from openapi_client.models.smart_info_response_dto import SmartInfoResponseDto
from openapi_client.models.tag_response_dto import TagResponseDto
from openapi_client.models.user_response_dto import UserResponseDto
from typing import Optional, Set
from typing_extensions import Self

class AssetResponseDto(BaseModel):
    """
    AssetResponseDto
    """ # noqa: E501
    checksum: StrictStr = Field(description="base64 encoded sha1 hash")
    device_asset_id: StrictStr = Field(alias="deviceAssetId")
    device_id: StrictStr = Field(alias="deviceId")
    duration: StrictStr
    exif_info: Optional[ExifResponseDto] = Field(default=None, alias="exifInfo")
    file_created_at: datetime = Field(alias="fileCreatedAt")
    file_modified_at: datetime = Field(alias="fileModifiedAt")
    has_metadata: StrictBool = Field(alias="hasMetadata")
    id: StrictStr
    is_archived: StrictBool = Field(alias="isArchived")
    is_external: Optional[StrictBool] = Field(default=None, description="This property was deprecated in v1.104.0", alias="isExternal")
    is_favorite: StrictBool = Field(alias="isFavorite")
    is_offline: StrictBool = Field(alias="isOffline")
    is_read_only: Optional[StrictBool] = Field(default=None, description="This property was deprecated in v1.104.0", alias="isReadOnly")
    is_trashed: StrictBool = Field(alias="isTrashed")
    library_id: StrictStr = Field(alias="libraryId")
    live_photo_video_id: Optional[StrictStr] = Field(default=None, alias="livePhotoVideoId")
    local_date_time: datetime = Field(alias="localDateTime")
    original_file_name: StrictStr = Field(alias="originalFileName")
    original_path: StrictStr = Field(alias="originalPath")
    owner: Optional[UserResponseDto] = None
    owner_id: StrictStr = Field(alias="ownerId")
    people: Optional[List[PersonWithFacesResponseDto]] = None
    resized: StrictBool
    smart_info: Optional[SmartInfoResponseDto] = Field(default=None, alias="smartInfo")
    stack: Optional[List[AssetResponseDto]] = None
    stack_count: Optional[StrictInt] = Field(alias="stackCount")
    stack_parent_id: Optional[StrictStr] = Field(default=None, alias="stackParentId")
    tags: Optional[List[TagResponseDto]] = None
    thumbhash: Optional[StrictStr]
    type: AssetTypeEnum
    updated_at: datetime = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = ["checksum", "deviceAssetId", "deviceId", "duration", "exifInfo", "fileCreatedAt", "fileModifiedAt", "hasMetadata", "id", "isArchived", "isExternal", "isFavorite", "isOffline", "isReadOnly", "isTrashed", "libraryId", "livePhotoVideoId", "localDateTime", "originalFileName", "originalPath", "owner", "ownerId", "people", "resized", "smartInfo", "stack", "stackCount", "stackParentId", "tags", "thumbhash", "type", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of exif_info
        if self.exif_info:
            _dict['exifInfo'] = self.exif_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in people (list)
        _items = []
        if self.people:
            for _item in self.people:
                if _item:
                    _items.append(_item.to_dict())
            _dict['people'] = _items
        # override the default output from pydantic by calling `to_dict()` of smart_info
        if self.smart_info:
            _dict['smartInfo'] = self.smart_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in stack (list)
        _items = []
        if self.stack:
            for _item in self.stack:
                if _item:
                    _items.append(_item.to_dict())
            _dict['stack'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # set to None if live_photo_video_id (nullable) is None
        # and model_fields_set contains the field
        if self.live_photo_video_id is None and "live_photo_video_id" in self.model_fields_set:
            _dict['livePhotoVideoId'] = None

        # set to None if stack_count (nullable) is None
        # and model_fields_set contains the field
        if self.stack_count is None and "stack_count" in self.model_fields_set:
            _dict['stackCount'] = None

        # set to None if stack_parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.stack_parent_id is None and "stack_parent_id" in self.model_fields_set:
            _dict['stackParentId'] = None

        # set to None if thumbhash (nullable) is None
        # and model_fields_set contains the field
        if self.thumbhash is None and "thumbhash" in self.model_fields_set:
            _dict['thumbhash'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checksum": obj.get("checksum"),
            "deviceAssetId": obj.get("deviceAssetId"),
            "deviceId": obj.get("deviceId"),
            "duration": obj.get("duration"),
            "exifInfo": ExifResponseDto.from_dict(obj["exifInfo"]) if obj.get("exifInfo") is not None else None,
            "fileCreatedAt": obj.get("fileCreatedAt"),
            "fileModifiedAt": obj.get("fileModifiedAt"),
            "hasMetadata": obj.get("hasMetadata"),
            "id": obj.get("id"),
            "isArchived": obj.get("isArchived"),
            "isExternal": obj.get("isExternal"),
            "isFavorite": obj.get("isFavorite"),
            "isOffline": obj.get("isOffline"),
            "isReadOnly": obj.get("isReadOnly"),
            "isTrashed": obj.get("isTrashed"),
            "libraryId": obj.get("libraryId"),
            "livePhotoVideoId": obj.get("livePhotoVideoId"),
            "localDateTime": obj.get("localDateTime"),
            "originalFileName": obj.get("originalFileName"),
            "originalPath": obj.get("originalPath"),
            "owner": UserResponseDto.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "ownerId": obj.get("ownerId"),
            "people": [PersonWithFacesResponseDto.from_dict(_item) for _item in obj["people"]] if obj.get("people") is not None else None,
            "resized": obj.get("resized"),
            "smartInfo": SmartInfoResponseDto.from_dict(obj["smartInfo"]) if obj.get("smartInfo") is not None else None,
            "stack": [AssetResponseDto.from_dict(_item) for _item in obj["stack"]] if obj.get("stack") is not None else None,
            "stackCount": obj.get("stackCount"),
            "stackParentId": obj.get("stackParentId"),
            "tags": [TagResponseDto.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "thumbhash": obj.get("thumbhash"),
            "type": obj.get("type"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
AssetResponseDto.model_rebuild(raise_errors=False)

