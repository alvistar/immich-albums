# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from openapi_client.models.album_response_dto import AlbumResponseDto
from openapi_client.models.asset_response_dto import AssetResponseDto
from openapi_client.models.shared_link_type import SharedLinkType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SharedLinkResponseDto(BaseModel):
    """
    SharedLinkResponseDto
    """ # noqa: E501
    album: Optional[AlbumResponseDto] = None
    allow_download: StrictBool = Field(alias="allowDownload")
    allow_upload: StrictBool = Field(alias="allowUpload")
    assets: List[AssetResponseDto]
    created_at: datetime = Field(alias="createdAt")
    description: Optional[StrictStr]
    expires_at: Optional[datetime] = Field(alias="expiresAt")
    id: StrictStr
    key: StrictStr
    password: Optional[StrictStr]
    show_metadata: StrictBool = Field(alias="showMetadata")
    token: Optional[StrictStr] = None
    type: SharedLinkType
    user_id: StrictStr = Field(alias="userId")
    __properties: ClassVar[List[str]] = ["album", "allowDownload", "allowUpload", "assets", "createdAt", "description", "expiresAt", "id", "key", "password", "showMetadata", "token", "type", "userId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SharedLinkResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of album
        if self.album:
            _dict['album'] = self.album.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in assets (list)
        _items = []
        if self.assets:
            for _item in self.assets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['assets'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expiresAt'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if token (nullable) is None
        # and model_fields_set contains the field
        if self.token is None and "token" in self.model_fields_set:
            _dict['token'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SharedLinkResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "album": AlbumResponseDto.from_dict(obj.get("album")) if obj.get("album") is not None else None,
            "allowDownload": obj.get("allowDownload"),
            "allowUpload": obj.get("allowUpload"),
            "assets": [AssetResponseDto.from_dict(_item) for _item in obj.get("assets")] if obj.get("assets") is not None else None,
            "createdAt": obj.get("createdAt"),
            "description": obj.get("description"),
            "expiresAt": obj.get("expiresAt"),
            "id": obj.get("id"),
            "key": obj.get("key"),
            "password": obj.get("password"),
            "showMetadata": obj.get("showMetadata"),
            "token": obj.get("token"),
            "type": obj.get("type"),
            "userId": obj.get("userId")
        })
        return _obj


