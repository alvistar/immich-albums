# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.person_response_dto import PersonResponseDto
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AssetFaceResponseDto(BaseModel):
    """
    AssetFaceResponseDto
    """ # noqa: E501
    bounding_box_x1: StrictInt = Field(alias="boundingBoxX1")
    bounding_box_x2: StrictInt = Field(alias="boundingBoxX2")
    bounding_box_y1: StrictInt = Field(alias="boundingBoxY1")
    bounding_box_y2: StrictInt = Field(alias="boundingBoxY2")
    id: StrictStr
    image_height: StrictInt = Field(alias="imageHeight")
    image_width: StrictInt = Field(alias="imageWidth")
    person: Optional[PersonResponseDto]
    __properties: ClassVar[List[str]] = ["boundingBoxX1", "boundingBoxX2", "boundingBoxY1", "boundingBoxY2", "id", "imageHeight", "imageWidth", "person"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AssetFaceResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict['person'] = self.person.to_dict()
        # set to None if person (nullable) is None
        # and model_fields_set contains the field
        if self.person is None and "person" in self.model_fields_set:
            _dict['person'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AssetFaceResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boundingBoxX1": obj.get("boundingBoxX1"),
            "boundingBoxX2": obj.get("boundingBoxX2"),
            "boundingBoxY1": obj.get("boundingBoxY1"),
            "boundingBoxY2": obj.get("boundingBoxY2"),
            "id": obj.get("id"),
            "imageHeight": obj.get("imageHeight"),
            "imageWidth": obj.get("imageWidth"),
            "person": PersonResponseDto.from_dict(obj.get("person")) if obj.get("person") is not None else None
        })
        return _obj


