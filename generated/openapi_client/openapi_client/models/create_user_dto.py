# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateUserDto(BaseModel):
    """
    CreateUserDto
    """ # noqa: E501
    email: StrictStr
    external_path: Optional[StrictStr] = Field(default=None, alias="externalPath")
    memories_enabled: Optional[StrictBool] = Field(default=None, alias="memoriesEnabled")
    name: StrictStr
    password: StrictStr
    quota_size_in_bytes: Optional[StrictInt] = Field(default=None, alias="quotaSizeInBytes")
    storage_label: Optional[StrictStr] = Field(default=None, alias="storageLabel")
    __properties: ClassVar[List[str]] = ["email", "externalPath", "memoriesEnabled", "name", "password", "quotaSizeInBytes", "storageLabel"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateUserDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if external_path (nullable) is None
        # and model_fields_set contains the field
        if self.external_path is None and "external_path" in self.model_fields_set:
            _dict['externalPath'] = None

        # set to None if quota_size_in_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.quota_size_in_bytes is None and "quota_size_in_bytes" in self.model_fields_set:
            _dict['quotaSizeInBytes'] = None

        # set to None if storage_label (nullable) is None
        # and model_fields_set contains the field
        if self.storage_label is None and "storage_label" in self.model_fields_set:
            _dict['storageLabel'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateUserDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "externalPath": obj.get("externalPath"),
            "memoriesEnabled": obj.get("memoriesEnabled"),
            "name": obj.get("name"),
            "password": obj.get("password"),
            "quotaSizeInBytes": obj.get("quotaSizeInBytes"),
            "storageLabel": obj.get("storageLabel")
        })
        return _obj


