# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.103.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.shared_link_type import SharedLinkType
from typing import Optional, Set
from typing_extensions import Self

class SharedLinkCreateDto(BaseModel):
    """
    SharedLinkCreateDto
    """ # noqa: E501
    album_id: Optional[StrictStr] = Field(default=None, alias="albumId")
    allow_download: Optional[StrictBool] = Field(default=True, alias="allowDownload")
    allow_upload: Optional[StrictBool] = Field(default=None, alias="allowUpload")
    asset_ids: Optional[List[StrictStr]] = Field(default=None, alias="assetIds")
    description: Optional[StrictStr] = None
    expires_at: Optional[datetime] = Field(default=None, alias="expiresAt")
    password: Optional[StrictStr] = None
    show_metadata: Optional[StrictBool] = Field(default=True, alias="showMetadata")
    type: SharedLinkType
    __properties: ClassVar[List[str]] = ["albumId", "allowDownload", "allowUpload", "assetIds", "description", "expiresAt", "password", "showMetadata", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SharedLinkCreateDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expiresAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SharedLinkCreateDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "albumId": obj.get("albumId"),
            "allowDownload": obj.get("allowDownload") if obj.get("allowDownload") is not None else True,
            "allowUpload": obj.get("allowUpload"),
            "assetIds": obj.get("assetIds"),
            "description": obj.get("description"),
            "expiresAt": obj.get("expiresAt"),
            "password": obj.get("password"),
            "showMetadata": obj.get("showMetadata") if obj.get("showMetadata") is not None else True,
            "type": obj.get("type")
        })
        return _obj


