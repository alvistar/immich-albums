# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.audio_codec import AudioCodec
from openapi_client.models.cq_mode import CQMode
from openapi_client.models.tone_mapping import ToneMapping
from openapi_client.models.transcode_hw_accel import TranscodeHWAccel
from openapi_client.models.transcode_policy import TranscodePolicy
from openapi_client.models.video_codec import VideoCodec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SystemConfigFFmpegDto(BaseModel):
    """
    SystemConfigFFmpegDto
    """ # noqa: E501
    accel: TranscodeHWAccel
    accepted_audio_codecs: List[AudioCodec] = Field(alias="acceptedAudioCodecs")
    accepted_video_codecs: List[VideoCodec] = Field(alias="acceptedVideoCodecs")
    bframes: StrictInt
    cq_mode: CQMode = Field(alias="cqMode")
    crf: StrictInt
    gop_size: StrictInt = Field(alias="gopSize")
    max_bitrate: StrictStr = Field(alias="maxBitrate")
    npl: StrictInt
    preferred_hw_device: StrictStr = Field(alias="preferredHwDevice")
    preset: StrictStr
    refs: StrictInt
    target_audio_codec: AudioCodec = Field(alias="targetAudioCodec")
    target_resolution: StrictStr = Field(alias="targetResolution")
    target_video_codec: VideoCodec = Field(alias="targetVideoCodec")
    temporal_aq: StrictBool = Field(alias="temporalAQ")
    threads: StrictInt
    tonemap: ToneMapping
    transcode: TranscodePolicy
    two_pass: StrictBool = Field(alias="twoPass")
    __properties: ClassVar[List[str]] = ["accel", "acceptedAudioCodecs", "acceptedVideoCodecs", "bframes", "cqMode", "crf", "gopSize", "maxBitrate", "npl", "preferredHwDevice", "preset", "refs", "targetAudioCodec", "targetResolution", "targetVideoCodec", "temporalAQ", "threads", "tonemap", "transcode", "twoPass"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SystemConfigFFmpegDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SystemConfigFFmpegDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accel": obj.get("accel"),
            "acceptedAudioCodecs": obj.get("acceptedAudioCodecs"),
            "acceptedVideoCodecs": obj.get("acceptedVideoCodecs"),
            "bframes": obj.get("bframes"),
            "cqMode": obj.get("cqMode"),
            "crf": obj.get("crf"),
            "gopSize": obj.get("gopSize"),
            "maxBitrate": obj.get("maxBitrate"),
            "npl": obj.get("npl"),
            "preferredHwDevice": obj.get("preferredHwDevice"),
            "preset": obj.get("preset"),
            "refs": obj.get("refs"),
            "targetAudioCodec": obj.get("targetAudioCodec"),
            "targetResolution": obj.get("targetResolution"),
            "targetVideoCodec": obj.get("targetVideoCodec"),
            "temporalAQ": obj.get("temporalAQ"),
            "threads": obj.get("threads"),
            "tonemap": obj.get("tonemap"),
            "transcode": obj.get("transcode"),
            "twoPass": obj.get("twoPass")
        })
        return _obj


