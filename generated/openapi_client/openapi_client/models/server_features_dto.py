# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.105.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ServerFeaturesDto(BaseModel):
    """
    ServerFeaturesDto
    """ # noqa: E501
    config_file: StrictBool = Field(alias="configFile")
    email: StrictBool
    facial_recognition: StrictBool = Field(alias="facialRecognition")
    map: StrictBool
    oauth: StrictBool
    oauth_auto_launch: StrictBool = Field(alias="oauthAutoLaunch")
    password_login: StrictBool = Field(alias="passwordLogin")
    reverse_geocoding: StrictBool = Field(alias="reverseGeocoding")
    search: StrictBool
    sidecar: StrictBool
    smart_search: StrictBool = Field(alias="smartSearch")
    trash: StrictBool
    __properties: ClassVar[List[str]] = ["configFile", "email", "facialRecognition", "map", "oauth", "oauthAutoLaunch", "passwordLogin", "reverseGeocoding", "search", "sidecar", "smartSearch", "trash"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerFeaturesDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerFeaturesDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configFile": obj.get("configFile"),
            "email": obj.get("email"),
            "facialRecognition": obj.get("facialRecognition"),
            "map": obj.get("map"),
            "oauth": obj.get("oauth"),
            "oauthAutoLaunch": obj.get("oauthAutoLaunch"),
            "passwordLogin": obj.get("passwordLogin"),
            "reverseGeocoding": obj.get("reverseGeocoding"),
            "search": obj.get("search"),
            "sidecar": obj.get("sidecar"),
            "smartSearch": obj.get("smartSearch"),
            "trash": obj.get("trash")
        })
        return _obj


